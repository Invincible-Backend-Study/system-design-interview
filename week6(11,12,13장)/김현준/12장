채팅 시스템은 1대1 인지, 그룹 채팅인지에 따라 다른 설계 양상을 띈다.

책에서 설계하는 채팅 시스템의 요구사항은 다음과 같다.

- 응답 지연이 낮은 일대일 채팅 기능
- 최대 100명까지 참여할 수 있는 그룹 채팅 기능
- 사용자 접속 상태 표시 기능
- 다양한 단말 지원, 하나의 계정으로 여러 단말에 동시 접속 지원
- 푸시 알림
- 5천만 DAU

## 설계

### 개략적인 설계안

채팅 시스템은 아래와 같은 기능을 제공

- 클라이언트들로부터 메시지 수신
- 메시지 수신자 결정 및 전달
- 수신자가 접속 상태가 아닌 경우에는 접속할 때까지 해당 메시지 보관

HTTP 프로톨콜을 사용하게 된다면 keep-alive 헤더를 사용해 클라이언트와 서버 사이의 연결을 끊지 않고 계속 유지해 핸드셰이크 과정을 줄일 수 있다.

그러나 메시지 수신 시나리오는 복잡하다. HTTP는 서버에서 클라이언트로 임의 시점에 메시지를 보내는 데는 쉽게 쓰일 수 없어 서버가 연결을 만드는 것처럼 동작할 수 있도록 하기 위해 많은 기법이 있다.

### 폴링

클라이언트가 주기적으로 서버에게 새 메시지가 있느냐고 물어보는 방법이다. 폴링 비용은 폴링을 자주하면 할수 록 올라간다. 답해줄 메시지가 없는 경우 서버 자원이 불필요하게 낭비된다는 문제가 있다.

### 롱 폴링

롱 폴링의 경우 클라이언트는 새 메시지가 반환되거나 타임아웃 될 때까지 연결을 유지한다. 클라이언트는 새 메시지를 받으면 기존 연결을 종료하고 서버에 새로운 요청을 보내어 모든 절차를 다시 시작한다.

약점은 다음과 같다.

- 메시지를 보내는 클라이언트와 수신하는 클라이언트가 같은 채팅 서버에 접속하게 되지 않을 수 있다. HTTP 서버는 무상태이며 로드밸런싱을 위해 라운드로빈 알고리즘을 사용하는 경우, 메시지를 받은 서버는 해당 메시지를 수신할 클라이언트와의 롱 폴링 연결을 가지고 있지 않은 서버일 수 있다.
- 서버 입장에는 클라이언트가 연결을 해제했는지 아닌지 알 좋은 방법이 없다.
- 여전히 비효율적이다. 메시지를 많이 받지 않는 클라이언트도 타임아웃이 일어날 때마다 주기적으로 서버에 다시 접속할 것이다.

### 웹소켓

웹소켓은 서버가 클라이언트에게 비동기 메시지를 보낼 때 가장 널리 이용하는 기술이다.

웹소켓 연결은 클라이언트가 시작하고, 한번 맺어진 연결은 영구적이며 양방향이다. HTTP 연결이지만 특정 핸드셰이크 절차를 거쳐 웹소켓 연결로 업그레이드된다. 연결이 이루어지면 클라이언트에게 비동기적으로 메시지를 전송할 수 있다.

유의 점은 연결이 영구적으로 유지되어야 하기 때문에 서버 측에서 연결 관리를 효율적으로 해야 한다.

따라서 웹소켓을 이용해 설계를 하되, 다른 부분은 굳이 웹소켓을 쓸 필요가 없기에 채팅 시스템을 세 부분으로 나누어 설계한다.

### 무상태 서비스

무상태 서비스로 로그인, 회원 가입 등등의 전통적인 요청/응답 서비스다. 로드밸런서 뒤에 위치하며 이 중 눈여겨볼 것은 서비스 탐색 서비스로 클라이언트에게 접속할 채팅 서버의 DNS 호스트명을 클라이언트에게 알려주는 역할을 한다.

### 상태 유지 서비스

채팅 서비스가 상태를 유지해야 할 필요가 있다. 각 클라이언트가 채팅 서버와 독립적인 네트워크 연결을 유지하며, 클라이언트는 보통 서버가 살아 있는 한 다른 서버로 연결을 변경하지 않아, 위에 언급한 서비스 탐색 서비스를 이용해 특정 서버에 부하가 몰리지 않도록 한다.

### 제 3자 서비스 연동

채팅 앱에서 가장 중요한 제3자 서비스는 푸시 알림이다. 따라서 푸시 알림 서비스와의 통합이 아주 중요하다.

### 규모 확장성

이론적으로는 모든 사용자 연결을 최신 클라우드 서버 한 대로 처리는 가능하다. 이 때 따져봐야 할 것은 서버 한 대로 얼마나 많은 접속을 동시에 허용할 수 있느냐다. 동시 접속자가 1M이라고 가정하면, 접속당 10K의 서버 메모리가 필요하다고 보면, 10GB 메모리만 있으면 모든 연결을 다 처리할 수 있다.

그러나 SPOF 등과 같은 이유로 서버 한 대로 처리하진 않는다.

설계는 다음과 같다.

- 채팅 서버는 클라이언트 사이에 메시지를 중재하는 역할을 한다.
- 접속상태 서버는 사용자 접속 여부를 관리한다.
- API 서버는 그 외 나머지 전부를 처리한다.
- 알림 서버는 푸시 알림을 보낸다.
- Key-Value 저장소는 채팅 이력을 보관한다.

### 저장소

저장소는 무엇을 쓰는게 좋을까?

첫 번째는 사용자 프로파일, 설정, 친구 목록 처럼 일반적인 데이터로 안정성을 보장하는 RDB에 저장해 다중화와 샤딩을 통해 가용성과 규모 확장성을 보장한다.

두 번째는 채팅 이력이다. 채팅 이력 데이터를 이해하자면, 

- 채팅 이력은 데이터 양이 엄청나고 최근 주고받은 메시지를 빈번하게 본다.
- 검색 기능이나 언급된 메시지를 보거나 특정 메시지로 점프하는 무작위적인 데이터 접근을 하게 되는 일도 있다.
- 1:1 채팅 앱의 경우 읽기:쓰기 비율은 대략 1:1정도다.

이 경우 키-값 저장소를 써 수평적 규모확장 및 지연시간을 줄인다. 또한 RDB는 데이터 가운데 롱 테일에 해당하는 부분을 잘 처리하지 못한다. 인덱스가 커지면 데이터에 대한 무작위 임의 접근을 처리하는 비용이 늘어난다.

### 데이터 모델

데이터 모델을 살펴보면 그룹 채팅과 1:1 채팅을 다른 데이터 구조를 사용한다. 그룹에는 채널ID, 메시지ID의 복합키를 사용한다. 채널ID는 파티션 키로도 사용할 수 있다.

여기서 메시지 ID를 만들 때는 고유하며, 정렬이 가능하여야 하며 시간 순서와 일치해야 한다.

이 경우 앞서 NoSQL은 보통 해당 기능을 제공하지 않아 앞서 배운 스노플레이크 같은 전역적 64-bit 순서 번호 생성기를 이용하는 것이다.

혹은 지역적 순서 번호 생성기를 이용해 ID의 유일성은 같은 그룹 안에서만 보증하도록 한다. 메시지 사이의 순서는 같은 채널 혹은 같은 1:1 채팅 세션 안에서만 유지되면 충분하기 때문이다. 전역적 ID 생성기에 비해 구현하기 쉽다.

### 서비스 탐색

서비스 탐색 기능의 주된 역할은 클라이언트에게 가자 적합한 채팅 서버를 추천하는 것이다. 이때 사용되는 기준으로는 클라이언트의 위치, 서버의 용량 등이 있다.

서비스 탐색 기능을 구현하는 솔루션은 아파치 zookeeper 같은 것이 있다.

사용 가능한 채팅 서버를 여기 등록해 접속 시도 시 기준에 따라 최적의 채팅 서버를 골라주면 된다.

### 접속상태 표시

접속상태 서버도 클라이언트와 웹소켓으로 통신하는 실시간 서비스이다.

- 사용자 로그인
    
    클라이언트와 실시간 서비스 사이에 웹소켓 연결이 맺어지고 나면 접속상태 서버는 A의 상태와 last_active_at 타임스탬프 값을 키-값 저장소에 보관한다. 이 절차가 끝나면 접속 중인 것으로 표시된다.
    
- 사용자 로그아웃
    
    사용자가 로그아웃을 날리게 되면 키-값 저장소에 online → offline으로 바꾼다.
    

### 접속 장애

인터넷 연결이 끊어지면 웹소켓 같은 지속성 연결도 끊어진다. 사용자를 오프라인 상태로 표시하고 연결이 복구되면 온라인 상태로 변경하는 간단한 방법을 통해 해결하기도 하지만 이 경우 짧은 시간동안 인터넷 연결이 끊어졌다 복구되는 일이 흔해서 지나치게 많이 바뀔 것이다.

이는 heartbeat 검사를 통해 이 문제를 해결한다. 온라인 상태의 클라이언트로 하여금 주기적으로 heartbeat event를 접속상태 서버로 보내도록 하고, 마지막 이벤트를 받은 지 x초 이내에 또 다른 박동 이벤트 메시지를 받으면 해당 사용자의 접속상태를 계속 온라인으로 유지하는 것이다.

### 상태 정보의 전송

사용자 A와 친구 관계에 있는 사용자들에게 해당 사용자의 상태 변화를 알리는 방식이 뭘까?

상태정보 서버는 발행-구독(pub/sub) 모델을 사용한다. 각각의 친구관계마다 채널을 하나씩 두어 사용자가 상태정보 변화를 쉽게 통지 받을 수 있게 된다. 이 경우에도 클라이언트와 서버 사이의 통신에는 실시간 웹소켓을 사용한다.

소규모 그룹일 때 유용하고, 대규모 일 때는 사용자가 그룹 채팅에 입장하는 순간에만 상태 정보를 읽어가게 하거나, 친구 리스트에 있는 사용자 접속상태를 갱신하고 싶으면 수동으로 하도록 유도하는 것이다.

## 메시지 흐름

### 1:1 채팅 메시지 처리 흐름

1. 사용자 A가 채팅 서버 1로 메시지 전송
2. 채팅 서버 1은 ID 생성기를 사용해 해당 메시지 ID 결정
3. 채팅 서버 1은 해당 메시지를 메시지 동기화 큐로 전송
4. 메시지가 키-값 저장소에 보관됨
5. 사용자 B가 접속 중인 경우 메시지는 사용자 B가 접속 중인 채팅 서버로 전송됨.
    1. B가 접속 중이 아니라면 푸시 알림 메시지를 푸시 알림 서버로 보냄
    2. 채팅 서버 2는 메시지를 사용자 B에게 전송. 사용자 B와 채팅 서버 2 사이에는 웹소켓 연결이 되어있어 그것을 이용

### 여러 단말 사이 메시지 동기화

랩톱과 모바일 두 대의 단말을 사용하면 둘 다 웹소켓 연결이 만들어져 있는 상황이다.
각 단말은 cur_max_message_id라는 변수를 유지하는데, 해당 단말에서 관측된 가장 최신 메시지의 ID를 추적하는 용도다.

아래 두 조건을 만족하는 메시지는 새 메시지로 간주한다.

- 수신자 ID가 현재 로그인한 사용자 ID와 같다.
- 키-값 저장소에 보관된 메시지로서, 그 ID가 cur_max_message_id보다 크다.

cur_max_message_id는 단말마다 별도로 유지 관리하면 되는 값이라 키-값 저장소에서 새 메시지를 가져오는 동기화 작업도 쉽게 구현할 수 있다.

### 소규모 그룹 채팅에서의 메시지 흐름

사용자가 3명이 있다고 가정할 때, 사용자 A가 보낸 메시지가 사용자 B와 C의 메시지 동기화 큐에 복사된다.
메시지 큐를 각각 할당된 메시지 수신함으로 활용하는 이 방식은 다음과 같은 장점이 존재한다.

- 새로운 메시지가 왔는지 확인하려면 자기 큐만 보면 되어서 메시지 플로우가 단순화
- 그룹의 크기가 작으면 메시지를 수신자 별로 복사해 큐에 넣는 작업 비용이 문제가 되지 않음.

위챗이 500명 이하의 그룹 크기를 제한하며 이 방법을 쓰고 있다. 하지만 많은 사용자를 지원하게 되면 이러한 방식은 바람직하지 않다.

## 추가로 생각해볼 점

- 채팅 앱을 확장하여 사진이나 비디오 등의 미디어를 지원하도록 하는 방법: 압축 방식, 클라우드 저장소, 섬네일 생성 등
- 캐시를 통해 클라이언트에 이미 읽은 메시지를 캐시해둔다.
- 로딩 속도 개선: 사용자 데이터, 채널 등을 지역적으로 분산하는 네트워크를 구축
- 오류 처리
    - 채팅 서버 오류: 서버가 죽을 시 서비스 탐색 기능이 동작해 새로운 서버를 클라이언트에게 배정하고 다시 접속 할 수 있도록 해야함
    - 메시지 재전송: 재시도나 큐 사용

## 그 외 아티클

- from nothing the evolution of wechat background system
    
    https://www.infoq.cn/article/the-road-of-the-growth-weixin-background
