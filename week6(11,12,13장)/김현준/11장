### 뉴스 피드란?

페이스북의 도움말 페이지에는, 뉴스 피드는 홈페이지 중앙에 지속적으로 업데이트되는 스토리들로, 사용자 상태 정보 업데이트, 사진, 비디오, 링크, 앱 활동, 좋아요 등을 포함한다. 라고 설명한다.

이외에도 인스타그램 피드, 트위터 타임라인 설계 등이 있다.

### 설계 조건

1. 모바일, 웹 둘 다 지원한다.
2. 사용지는 뉴스 피드 페이지에 새로운 스토리를 올릴 수 있어야 하고, 친구들이 올리는 스토리를 볼 수 있어야 한다.
3. 시간 흐름 역순으로 표시된다.
4. 5000명의 친구를 가지고 매일 천만 명이 이용한다.
5. 스토리에는 미디어 파일이 포함될 수 있다.

## 설계

### 시스템에 필요한 기능

- 피드 발행: 사용자가 스토리를 포스팅하면 해당 데이터를 캐시와 데이터베이스에 기록한다. 새 포스팅은 친구의 뉴스 피드에도 전송된다.
- 뉴스 피드 생성: 지면 관계상 뉴스 피드는 모든 친구의 포스팅을 시간 흐름 역순으로 모아서 만든다고 가정한다.

### 피드 발행

- 포스팅 전송 서비스: 새 포스팅을 친구의 뉴스 피드에 푸시(push)한다. 뉴스 피드 데이터는 캐시에 보관해 빠르게 읽어갈 수 있도록 한다.
- 알림 서비스: 친구들에게 새 포스팅이 올라 왔음을 알리거나, 알림을 보내는 역할을 담당한다.
- 특정 기간 동안 한 사용자가 올릴 수 있는 포스팅의 수에 제한을 두어야한다.

### 피드 생성

피드를 읽는 주체들이 보내는 API

- 뉴스 피드 서비스: 캐시에서 뉴스 피드를 가져오는 서비스
- 뉴스 피드 캐시: 뉴스 피드를 렌더링할 때 필요한 피드 ID를 보관한다.

### 포스팅 전송(팬아웃) 서비스

포스팅 전송, 즉 팬아웃은 어떤 사용자의 새 포스팅을 그 사용자와 친구 관계에 있는 모든 사용자에게 전달하는 과정이다.

- 쓰기 시점에 팬아웃하는 모델(push): 새로운 포스팅을 기록하는 시점에 뉴스 피드를 갱신
    - 뉴스 피드가 실시간으로 갱신되므로 뉴스 피드를 읽는 데 드는 시간이 짧아짐
    - 찬구가 많은 사용자의 경우 친구 목록에 있는 사용자 모두의 뉴스 피드를 갱신하는 데 많은 시간 소요.(핫키 문제)
    - 서비스를 자주 이용하지 않는 사용자의 피드까지 갱신해야 함
- 읽기 시점에 팬아웃하는 모델(pull): 피드를 읽어야 하는 시점에 뉴스 피드를 갱신한다.
    - 비활성화된 사용자나 거의 로그인 하지 않는 사용자의 경우 이 모델이 유리
    - 데이터를 친구 각각에 푸시하는 작업이 필요없으므로 핫키 문제도 생기지 않음
    - 뉴스 피드를 읽는 데 많은 시간 소요

위 두 가지를 결합하여 대부분의 사용자에 대해서는 푸시 모델, 친구나 팔로워가 많은 사용자의 경우는 팔로워로 하여금 풀 모델을 사용. 아울러 안정 해시를 통해 핫키 문제를 줄임.

- 동작 과정
    1. 그래프 데이터베이스에서 친구 ID 목록을 가져온다.
    2. 사용자 정보 캐시에서 친구들의 정보를 가져온다. 그런 후에 사용자 설정에 따라 친구 가운데 일부를 걸러낸다.
    3. 친구 목록과 새 스토리의 포스팅 ID를 메시지 큐에 넣는다.
    4. 팬아웃 작업 서버가 메시지 큐에서 데이터를 꺼내어 뉴스 피드 데이터를 뉴스 피드 캐시에 넣는다. 상황을 가정했을 때 한 사용자가 수천개의 뉴스 피드를 보는 일은 낮기에 캐시 미스가 낮아서 메모리 크기를 적정 수준으로 유지하면서 일정한 캐시 히트률을 유지하기 위해 캐시의 크기에 제한을 둔다.

### 피드 읽기 흐름

1. 사용자가 뉴스 피드를 읽으려는 요청을 보낸다.
2. 로드밸런서가 요청을 분배하고 웹 서버는 피드를 가져오기 위해 뉴스 피드 서비스를 호출한다.
3. 뉴스 피드 서비스는 뉴스 피드 캐시에서 포스팅 ID 목록을 가져온다.
4. 뉴스 피드에 표시할 사용자 이름, 사용자 사진, 포스팅 콘텐츠, 이미지 등을 사용자 캐시와 포스팅 캐시에서 가져와 완전한 뉴스 피드를 만든다.
5. 생성된 뉴스 피드를 JSON 형태로 사용자에게 보낸다.

### 캐시 구조

- 뉴스 피드: 뉴스 피드 ID를 보관
- 콘텐츠: 포스팅 데이터를 보관. 인기 콘텐츠는 따로 보관.
- 소셜 그래프: 사용자 간 관계 정보를 보관.
- 행동: 포스팅에 대한 사용자의 행위에 관한 정보를 보관. 포스팅에 대한 ‘좋아요’, ‘답글’ 등등
- 횟수: ‘좋아요’ 횟수, 응답 수, 팔로어 수, 팔로잉 수 등의 정보를 보관.

## TAO

https://engineering.fb.com/2013/06/25/core-infra/tao-the-power-of-the-graph/

https://www.youtube.com/watch?v=sNIvHttFjdI&t=20s&ab_channel=USENIX
